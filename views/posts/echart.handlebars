{{!-- 
<script type="text/javascript">
    // 基于准备好的dom，初始化echarts实例
    var myChart = echarts.init(document.getElementById('main1'));

    // 指定图表的配置项和数据
    var posList = [
        'left', 'right', 'top', 'bottom',
        'inside',
        'insideTop', 'insideLeft', 'insideRight', 'insideBottom',
        'insideTopLeft', 'insideTopRight', 'insideBottomLeft', 'insideBottomRight'
    ];

    app.configParameters = {
        rotate: {
            min: -90,
            max: 90
        },
        align: {
            options: {
                left: 'left',
                center: 'center',
                right: 'right'
            }
        },
        verticalAlign: {
            options: {
                top: 'top',
                middle: 'middle',
                bottom: 'bottom'
            }
        },
        position: {
            options: posList.reduce(function (map, pos) {
                map[pos] = pos;
                return map;
            }, {})
        },
        distance: {
            min: 0,
            max: 100
        }
    };

    app.config = {
        rotate: 90,
        align: 'left',
        verticalAlign: 'middle',
        position: 'insideBottom',
        distance: 15,
        onChange: function () {
            var labelOption = {
                normal: {
                    rotate: app.config.rotate,
                    align: app.config.align,
                    verticalAlign: app.config.verticalAlign,
                    position: app.config.position,
                    distance: app.config.distance
                }
            };
            myChart.setOption({
                series: [{
                    label: labelOption
                }, {
                    label: labelOption
                }, {
                    label: labelOption
                }, {
                    label: labelOption
                }]
            });
        }
    };


    var labelOption = {
        show: true,
        position: app.config.position,
        distance: app.config.distance,
        align: app.config.align,
        verticalAlign: app.config.verticalAlign,
        rotate: app.config.rotate,
        formatter: '{c}  {name|{a}}',
        fontSize: 16,
        rich: {
            name: {

            }
        }
    };

    option = {
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            }
        },
        legend: {
            data: ['Food', 'Entertainment', 'Transition', 'Other']
        },
        toolbox: {
            show: true,
            orient: 'vertical',
            left: 'right',
            top: 'center',
            feature: {
                mark: { show: true },
                dataView: { show: true, readOnly: false },
                magicType: { show: true, type: ['line', 'bar', 'stack', 'tiled'] },
                restore: { show: true },
                saveAsImage: { show: true }
            }
        },
        xAxis: [
            {
                type: 'category',
                axisTick: { show: false },
                data: ['2012', '2013', '2014', '2015', '2016']//这里的数据需要更改，调用当前需要现显示的时间
            }
        ],
        yAxis: [
            {
                type: 'value'
            }
        ],
        series: [
            {
                name: 'Food',
                type: 'bar',
                barGap: 0,
                label: labelOption,
                emphasis: {
                    focus: 'series'
                },
                data: [320, 332, 301, 334, 390]//这里的数据需要更改，调用当前需要现显示的数据
            },
            {
                name: 'Entertainment',
                type: 'bar',
                label: labelOption,
                emphasis: {
                    focus: 'series'
                },
                data: [220, 182, 191, 234, 290]//这里的数据需要更改，调用当前需要现显示的数据
            },
            {
                name: 'Transition',
                type: 'bar',
                label: labelOption,
                emphasis: {
                    focus: 'series'
                },
                data: [150, 232, 201, 154, 190]//这里的数据需要更改，调用当前需要现显示的数据
            },
            {
                name: 'Other',
                type: 'bar',
                label: labelOption,
                emphasis: {
                    focus: 'series'
                },
                data: [98, 77, 101, 99, 40]//这里的数据需要更改，调用当前需要现显示的数据
            }
        ]
    };

    myChart.setOption(option);
</script> --}}

{{!-- <template>
    <div class="layout">
        <div class="left-container">
            <el-table :data="tableData" style="width: 100%;height: 100%;">
                <el-table-column prop="date" label="Date" />
                <el-table-column prop="food" label="Food" />
                <el-table-column prop="entertainment" label="Entertainment" />
                <el-table-column prop="transition" label="Transition" />
                <el-table-column prop="other" label="Other" />
                <el-table-column prop="total" label="Total" />
                <el-table-column prop="note" label="Note" />
                <el-table-column label="Operation" width="150">
                    <template slot-scope="scope">
                        <el-button type="text" size="small">View</el-button>
                        <el-button type="text" size="small" @click="onDetail(scope.row)">Detail</el-button>
                        <el-button type="text" size="small">Edit</el-button>
                    </template>
                </el-table-column>
            </el-table>
        </div>
        <div class="right-container">
            <div ref="chartContainer" class="chartContainer" />
        </div>
    </div>
</template> --}}

<script>
    window.myChart = echarts.init(document.getElementById('chartContainer01'));
    export default {
        name: 'BillList',
        props: {
            chartData: {
                default: () => { },
                type: Array
            }
        },
        //告诉view 组件里声明的变量 对vue进行追踪 
        data() {
            return {
                myChart: null,
                tableData: [],
                dataMap: {}
            }
        },

        watch: {
            chartData: {
                handler(newValue, oldValue) {
                    this.tableData = newValue.map(item => {
                        item && (this.dataMap[item._id] = {
                            ...item
                        })
                        return {
                            ...item
                        }
                    })
                    //这里没传id
                    this.setChart()
                },
                deep: true
            }
        },
        //mounted vue组件进行加载的时候 挂载vue  会自动执行mounted里面的东西  变量
        mounted() {
            //echart
            this.myChart = this.$echarts.init(this.$refs.chartContainer)
            // this.getBillChart()
            //chartdata 服务端拿到的 tabledata是table用到的数据
            this.tableData = this.chartData.map(item => {
                item && (this.dataMap[item._id] = {
                    ...item
                })
                return {
                    ...item
                }
                //这里传了id
            })
        },
        //setchart里面写的是组件所用用到的方法  函数 封装了一个函数  传入一个id 渲染对应的图像
        methods: {
            onDetail(row) {
                this.setChart(row._id)
            },
            //查看某个图片setchart
            setChart(id) {
                let option
                //很多地方默认加载今天 会很多地方用到  不传id  【0】第一项 是今天  
                if (!id) {
                    id = this.chartData[0]._id
                }
                const temp = this.dataMap[id]
                const data = [
                    { value: temp.food, name: 'Food' },
                    { value: temp.entertainment, name: 'Entertainment' },
                    { value: temp.transition, name: 'Transition' },
                    { value: temp.other, name: 'Other' }
                ]
                this.myChart.clear()
                //setOption 的意义
                this.myChart.setOption({
                    title: {
                        text: `Bill On ${temp.date}`,
                        left: 'center',
                        top: 20,
                        textStyle: {
                            color: '#ccc'
                        }
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 20,
                        top: 20,
                        bottom: 20
                    },
                    series: [
                        {
                            name: '',
                            type: 'pie',
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            data
                        }
                    ]
                })
            }
        }
    }
</script>

